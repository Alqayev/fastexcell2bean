package large.excell.to.bean.ta.utilities.enums;

import java.io.Serializable;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
/**
 * 
 * @author Taleh Algayev
 * Jun 1, 2018
 */
public enum CoreMessages implements Serializable {
	//specific errors for caller

	SPEC_ERROR(11),
	SPEC_ERROR5(51),
	DB_ERROR(1101),
	GENERAL_ERROR(1100),
	MISSED_INPUT_ERROR(1102),
	INPUT_FORMAT_ERROR(1103),
	SAME_REQUEST_NUMBER(1104),
	DATA_NOT_FOUND_ERROR(1109),
	WRONG_INPUT_ERROR(1113),
	CUSTOM_ERROR(1114),



	// system errors
	HIBERNATE_EXCEPTION(1001),
	REMOTE_EXCEPTION(1002),
	IO_EXCEPTION(1003),
	PARSE_EXCEPTION(1004),
	WS_EXCEPTION(1005),
	UNIFORM_INTERFACE_EXCEPTION(1006),
	CLIENT_HANDLER_EXCEPTION(1007),
	UNKNOWN_HOST_EXCEPTION(1008),
	OTHER_EXCEPTION(1009) ,
	DAEMON_EXCEPTION(1010),
	SYSTEM_EXCEPTION(1011),
	INSERT_NOT_COMPLETED(1013),
	INVALID_REQUEST_PARAMATERS(1014),
	CRITICAL_EXCEPTION(1016) ,
	DUPLICATE_DATA_ERROR(1017) ,
	INVALID_REQUEST_NUMBER(1018),
	ILLEGAL_ARGUMENT_EXCEPTION(1018),
	ILLEGAL_ACCESS_EXCEPTION(1019),
	SECURITY_EXCEPTION(1020),
	INVOCATION_TARGET_EXCEPTION(1021),
	NO_SUCH_METHOD_EXCEPTION(1022),
	PERSISTENT_EXCEPTION(1023),

	//property load errors
	PROP_LOAD_EXCEPTION(3002),
	PROP_NOT_EXISTS_EXCEPTION(3003),



	INVALID_OLD_PASSWORD(51117),
	INVALID_VERIFICATION_TOKEN(51118),
	USER_ALREADY_EXIST(51115),
	MAIL_AUTHENTICATION_ERROR(51116),
	USER_NOT_FOUND(51121),
	INVALID_CREDITIONALS(51122),
	INVALID_TOKEN(51123),
	INVALID_JWT_TOKEN(51124),
	NULL_INPUT(51119),
	UNHANDLED_ERROR(51120),
	TOKEN_FILTER_FAILED(51126),
	INTERNAL_SERVER_ERROR(51127),
	USER_IS_DISABLED(51128),
	USER_ALREADY_REMOVED(51199),
	YOU_CANT_DELETE_YOURSELF(51100),
	YOU_CANT_REMOVE_ONE_ROLE(51900),
	ROLE_DOES_NOT_EXIST(51129),
	INVALID_REQUEST_BEAN(51130),
	INVALID_RESPONSE_BEAN(51131),
	INVALID_RESPONSE_BODY(51132),
	INVALID_REQUEST_BODY(51133),
	SIZE_ERROR_KZ(51991),
	SIZE_ERROR_OTHER(51992),
	
	INVALID_LOGIN(51134),
	INVALID_USER_SESSION(51135),
	ACCESS_DENIED_FOR_THIS_SERVICE(51125),
	USER_HAS_NOT_THIS_AUTHORITY(51136),
	USER__AUTHORITY_ALREADY_EXIST(51137),
	VALIDATION_ERROR(51138),
	MIN_ERROR(51139),
	MAX_ERROR(51140),
	NOT_NULL_ERROR(51141),
	SIZE_ERROR(51142),
	INVALID_OR_EXPIRED_PASSWORD_RESET_TOKEN(51143),
	GENERAL_VALIDATION_ERROR(51144),
	NOT_EMPTY_ERROR(51145),
	INVALID_PASSWORD_RESET_TOKEN(51146),
	USER_EMAIL_ALREADY_EXIST(51147),
	NO_ROLE_HAS_ENTERED(51148),
	INVALID_SESSION_ID(51149),
	UNDEFINED_SERVICE_NAME(51150),
	HAS_REJECTED_APPLY(51151),
	THIS_MODULE_OR_SERVICE_DOES_NOT_EXIST(51152),


	//Poll errors
	POLL_NOT_FOUND(11981),
	POLL_ANSWER_NOT_FOUND(11982),
	SURVEY_NOT_FOUND(11983),
	SURVEY_QUESTION_NOT_FOUND(11984),
	SURVEY_ANSWER_NOT_FOUND(11985 ),
	POLL_QUESTION_NOT_FOUND(11986),
	POLL_QUESTION_DESCRIPTION_NOT_FOUND(11987),
	POLL_ANSWER_DESCRIPTION_NOT_FOUND(11988),
	SURVEY_QUESTION_DESCRIPTION_NOT_FOUND(11989),
	SURVEY_ANSWER_DESCRIPTION_NOT_FOUND(11990),

	//settings
	SETTINGS_NOT_FOUND(11991),


	//Cabinet errors
	LOOK_UP_NOT_FOUND(11701),
	LOOK_UP_DETAIL_NOT_FOUND(11702),
	LOOK_UP_NOT_DELETE(11732),
	LOOK_UP_DETAIL_DESCRIPTION_NOT_FOUND(11703),
	INVALID_LANGUAGE_SIZE(11704),
	PROFILE_DATA_NOT_FOUND(11705),
	PROFILE_DATA_DOCUMENT_NOT_FOUND(11706),
	SPECIALITY_NOT_FOUND(11707),
	LANGUAGE_NOT_FOUND(11708),
	EVAL_TYPE_NOT_FOUND(11709),
	FILE_NOT_UPLOADED(11710),
	PAYMENT_NUMBER_ALREADY_EXIST(11730),
	UNKNOWN_FILE_EXTENSION(11715),
	EVAL_EQUIVALENT_NOT_FOUND(11711),
	INVALID_EVAL_EQUIVALENT_SIZE(11712),
	INVALID_NUMBER_FORMAT(11713),
	LIBRARY_NOT_FOUND(11714),
	//UNKNOWN_SIZE_ERROR(11718),
	WRONG_AGE(11731),
	WRONG_EDUC_PERIOD(11733),
	WRONG_AUTHOR_DATE(11734),
	WRONG_PAYMENT_DATE(11736),
	HAS_NOT_ATTACHED_FILE(11737),


	//exammanagement errors;
	EXAM_NOT_FOUND(11801),
	EXAM_NOT_DELETE(11835),
	PRACTICAL_EXAM_NOT_SELECTED(11836),
	PRACTICAL_EXAM_CAN_NOT_SELECTED(11837),
	EXAM_HAS_FAILED(11838),
	EXAM_HAS_NOT_PASSED(11839),
	EXAM_INTERVAL_HAS_CROSSING(11843),
	PRACTICAL_EXAM_INTERVAL_HAS_CROSSING(11844),
	UNKNOWN_ANSWER_SIZE(11825),
	UNKNOWN_ANSWER_TYPE(11826),
	PERMISSION_ERROR(11821),
	USER_APPLY_NOT_FOUND(11848),
	ALREADY_CONFIRM(11845),
	ALREADY_REJECT(11840),
	EXAM_TIME_NOT_FOUND(11802),
	EXAM_DURATION_NOT_FOUND(11812),
	STATION_NOT_FOUND(11803),
	EXAM_STATION_NOT_FOUND(11804),
	EXAM_STATION_TASK_NOT_FOUND(11805),
	EXAM_STATION_CONTROLLER_USER_NOT_FOUND(11806),
	EXAM_APPLY_STATION_NOT_FOUND(11819),
	EXAM_APPLY_STATION_RESULT_NOT_FOUND(11820),
	EXAM_PARTICIPANT_LIMIT_SIZE(11880),
	EXAM_LAST_APPEAL_DATE_PASSED(11881),
	EXAM_APPLY_NOT_FOUND(11822),
	SPECIALITY_DIVISION_NOT_FOUND(11807), 
	SPECIALITY_DIVISION_CHILD_COUNT(11809),
	SPECIALITY_DIVISION_PROPORTION_NOT_VALID(11810),
	CURRENT_USER_APPLY_EXAM(11888),

	TEST_QUESTION_NOT_FOUND(11909),
	TEST_QUESTION_DESCRIPTION_NOT_FOUND(11910),
	TEST_QUESTION_ANSWER_NOT_FOUND(11911),
	TEST_QUESTION_ANSWER_DESCRIPTION_NOT_FOUND(11912),
	EXAM_QUESTION_NOT_FOUND(11815),
	EXAM_QUESTION_DESCRIPTION_NOT_FOUND(11816),
	EXAM_QUESTION_ANSWER_NOT_FOUND(11817),
	EXAM_QUESTION_ANSWER_DESCRIPTION_NOT_FOUND(11818),
	EXAM_PAYMENT_NOT_FOUND(11811),
	EXAM_TIME_ERROR(11813),
	EXAM_TYPE_NOT_FOUND(11873),
	NOT_START_PRACTICE_EXAM(11841),
	PRACTICE_EXAM_DATA_NOT_FOUND(11842),

	//admin errors
	AUTHOR_DATE_NOT_FOUND(11901),
	UNKNOWN_STATE(11902),
	EMPTY_RESPONSE(11903),
	AUTHOR_DATE_TIMES_ARE_WRONG(11904), 
	AUTHOR_AND_DATE_INFO_EXISTS(11905), 
	PERMISSION_DATE_ERROR(11939), 
	TEST_EXAM_VARIANT_NOT_FOUND(11915),
	TEST_EXAM_VARIANT_DETAIL_NOT_FOUND(11916),
	PREVIOUS_TEST_QUESTION_NOT_NOT_FOUND(11917),
	NEXT_TEST_QUESTION_NOT_NOT_FOUND(11918),
	TEST_ANSWER_NOT_SELECTED(11919),
	TEST_EXAM_ALREADY_FINISHED(11920), 
	TEST_EXAM_VALIDATION_ERROR(11921), 
	TEST_EXAM_FTYPE_DATA_NOT_FOUND(11922),
	TEST_EXAM_FTYPE_QUESTION_CLICKED(11923),



	EXAM_VARIANT_NOT_FOUND(11924),
	EXAM_VARIANT_DETAIL_NOT_FOUND(11925),
	PREVIOUS_EXAM_QUESTION_NOT_NOT_FOUND(11926),
	NEXT_EXAM_QUESTION_NOT_NOT_FOUND(11927),
	EXAM_ANSWER_NOT_SELECTED(11928),
	EXAM_ALREADY_FINISHED(11929), 
	EXAM_VALIDATION_ERROR(11930), 
	EXAM_FTYPE_DATA_NOT_FOUND(11931),
	EXAM_FTYPE_QUESTION_CLICKED(11932),
	DUBLICATED_DATA(11933),
	AUTHOR_PERMISSION_DENIED(11934),
	USER_HAS_ALREADY_APPLIED(11935),
	APPLY_STATE_MUST_BE_REJECTED(11936),
	USER_APPLY_STATE_MUST_BE_WAIT(11937), 
	PRACTICE_EXAM_VALIDATION_ERROR(11938),

	///////// en sonuncular
	POLL_ALREADY_EXIST_FOR_THIS_DATE_INTERVAL(11992),
	SURVEY_ALREADY_EXIST_FOR_THIS_DATE_INTERVAL(11993),
	POLL_ANSWER_SIZE_EXCEED(11994),
	ONLY_ONE_ANSWER(11995),
	POLL_TYPE_INVALID(11996),
	DOCUMENT_CREATION_FAILED(11940),
	ERROR_WHEN_CREATE_TEMPLATE(12999),
	SETTINGS_TYPE_NOT_VALID(11997),
	WRONG_APPLY_TIME_FOR_EXAM(11998),
	ROLE_CANNOT_REMOVED(11999),
	OTHER_STATION_EXAM_HAS_ALREADY_STARTED(11600),
	CANNOT_REAPPLY_TO_PRACTICE_EXAM(11601),
	APPEAL_LAST_DATE_ERROR(11850),
	NOT_SELECTED_SAME_DAY(11851),
	NOT_SELECTED_GREAT_DAY(11852),
	NOT_SELECTED_PAST_DAY(11853),
	NOT_SELECTED_CORRECTED_COMBO(11854),
	TEMPLATE_NOT_FOUND(11855),
	NOT_SELECTED_SAME_DAY_FIRST(11856),
	NOT_SELECTED_GREAT_DAY_FIRST(11857),
	NOT_SELECTED_PAST_DAY_FIRST(11858),
	QUESTION_COUNT_ERROR(11860),
	NOT_SELECTED_PAST_DAY_FIRST_AND_LAST(11859),
	NO_RESULT(11860),
	NO_USER_SELECTED(11861),
	NO_CHANGES(11862),
	
	//excell
	WRONG_COLUMN_SIZE(11863),
	PARSE_ERROR(11864),
	CHOOSE_MINIMUM_CORRECT_ANSWER(11866),
	ANSWER_CANT_EMPTY(11867),
	QUESTION_DESC_CANT_EMPTY(11868),
	YOU_CAN_CHOOSE_ONE_TRUE_ANSWER(11869),
	EXCELL_MAX_ROW_COUNT(11870),
	INVALID_EXCELL_FORM(11865),
	WRONG_SHEET(11871)
	;
	


	private int errorCode;

	private CoreMessages(int errorCode) {
		this.setErrorCode(errorCode);
	}

	private void setErrorCode(int errorCode) {
		this.errorCode = errorCode;
	}

	public int getErrorCode() {
		return errorCode;
	}


	public static boolean isCoreMessages(String value) {
		for (CoreMessages me : CoreMessages.values()) {
			if (String.valueOf(me.getErrorCode()).equalsIgnoreCase(value))
				return true;
		}
		return false;
	}

	public static CoreMessages getObject(String value) {
		for (CoreMessages me : CoreMessages.values()) {
			if (String.valueOf(me.getErrorCode()).equalsIgnoreCase(value))
				return me;
		}
		return GENERAL_ERROR;
	}

	public static int getValue(String name) {
		for (CoreMessages me : CoreMessages.values()) {
			if (me.name().equalsIgnoreCase(name))
				return me.getErrorCode();
		}
		return GENERAL_ERROR.errorCode;
	}

	public List<CoreMessages> getValues(){
		return Arrays.asList(CoreMessages.values());
	}
	
	

}

class CoreMessageComparator implements Comparator<CoreMessages>
{
    public int compare(CoreMessages o1, CoreMessages o2)
    {
        return o1.getErrorCode() - o2.getErrorCode(); 
    }
}
